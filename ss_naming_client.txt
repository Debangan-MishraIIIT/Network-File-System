temporary code for a storage server to connect with naming server first and then the client:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netinet/in.h>

struct pair {
    int first;
    int second;
};

struct pair server_establish_connection(int PORT) {
    int sockfd, connfd, len;
    struct sockaddr_in servaddr, cli;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1) {
        perror("socket");
        exit(0);
    } else
        printf("Socket successfully created..\n");
    bzero(&servaddr, sizeof(servaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(PORT);

    if ((bind(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) != 0) {
        perror("bind");
        exit(0);
    } else
        printf("Socket successfully binded..\n");

    if ((listen(sockfd, 5) != 0) {
        perror("listen");
        exit(0);
    } else
        printf("Server listening..\n");
    len = sizeof(cli);

    connfd = accept(sockfd, (struct sockaddr*)&cli, &len);
    if (connfd < 0) {
        perror("connfd");
        exit(0);
    } else
        printf("Server accepted the client1...\n");

    // Receive essential information from client1 (IP and port of client2)
    char client2_ip[16]; // Assuming IPv4
    int client2_port;
    recv(connfd, client2_ip, sizeof(client2_ip), 0);
    recv(connfd, &client2_port, sizeof(client2_port), 0);

    // Create a new socket to establish a connection to client2
    int client2_sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (client2_sockfd == -1) {
        perror("client2 socket");
        exit(0);
    } else
        printf("Client2 socket successfully created..\n");

    struct sockaddr_in client2_addr;
    bzero(&client2_addr, sizeof(client2_addr));
    client2_addr.sin_family = AF_INET;
    client2_addr.sin_addr.s_addr = inet_addr(client2_ip);
    client2_addr.sin_port = htons(client2_port);

    if (connect(client2_sockfd, (struct sockaddr*)&client2_addr, sizeof(client2_addr)) != 0) {
        perror("client2 connect");
        exit(0);
    } else
        printf("Server connected to client2...\n");

    struct pair p;
    p.first = sockfd;
    p.second = connfd;
    return p;
}

int main() {
    int PORT = 8080;
    struct pair p = server_establish_connection(PORT);
    int sockfd = p.first;
    int connfd = p.second;

    send_file("file.txt", connfd);
    close(sockfd);

    // Use the client2 connection as needed
}
